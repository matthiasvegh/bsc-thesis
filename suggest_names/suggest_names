#!/usr/bin/env python3

import argparse

import database
import merge
import suggest
import os

def _find_corresponding_varaible(variables, filename, line, column):
    for variable in variables:
        location_components = variable.location.split(':')
        location_components[1] = int(location_components[1])
        location_components[2] = int(location_components[2])
        if os.path.samefile(location_components[0], filename):
            if [line, column] == location_components[1:]:
                return variable
    else:
        raise ValueError('Variable to suggest for is not in merged database')

def print_suggestions(databasefiles, filename, line, column):
    databases = [
        database.Database.load_from_file(databasefile)
        for databasefile in databasefiles]
    merged_database = merge.merge_databases(databases)

    variable = _find_corresponding_varaible(merged_database.variables,
            filename, line, column)
    print('\n'.join(suggest.suggest_for(merged_database, variable)))


def main():
    parser = argparse.ArgumentParser(description='Suggest variable names')
    parser.add_argument('database', nargs='+', type=argparse.FileType('r'),
        help='JSON produced by clang-plugin containing all variables')
    parser.add_argument('filename', type=str,
        help='Filename containing variable to suggest names for')
    parser.add_argument('line', type=int,
        help='Line number of variable to suggest names for')
    parser.add_argument('column', type=int,
        help='Column number of variable to suggest names for')
    args = parser.parse_args()

    print_suggestions(args.database, args.filename, args.line, args.column)


if __name__ == '__main__':
    main()
